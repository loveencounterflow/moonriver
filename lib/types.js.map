{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nstf_prefix                = '_source_transform_from_'\ntypes                     = null\n\n#===========================================================================================================\nget_types = ->\n  return types if types?\n  types                     = new ( require 'intertype' ).Intertype()\n  main                      = require './main'\n\n  # #---------------------------------------------------------------------------------------------------------\n  # types.declare.mr_segment        ( x ) -> x? and ( x instanceof main.Segment ) or ( x instanceof main.Async_segment )\n  # types.declare.mr_sync_segment   ( x ) -> x? and ( x instanceof main.Segment )\n  # types.declare.mr_async_segment  ( x ) -> x? and ( x instanceof main.Async_segment )\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.function0\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 0 )\n    default:    ->\n    override:   true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.function1\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 1 )\n    default:    ( x ) ->\n    override:   true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.function2\n    isa:        ( x ) -> ( @isa.function x ) and ( x.length is 2 )\n    default:    ( x, y ) ->\n    override:   true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.asyncfunction1\n    isa:        ( x ) -> ( @isa.asyncfunction x ) and ( x.length is 1 )\n    default:    ( x ) ->\n    override:   true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.asyncfunction2\n    isa:        ( x ) -> ( @isa.asyncfunction x ) and ( x.length is 2 )\n    default:    ( x, y ) ->\n    override:   true\n\n  #---------------------------------------------------------------------------------------------------------\n  sync_source_fitting_types  = new Set do =>\n    ( name.replace stf_prefix, '' \\\n      for name in ( GUY.props.keys main.Segment::, { hidden: true, } ) \\\n        when name.startsWith stf_prefix )\n\n  #---------------------------------------------------------------------------------------------------------\n  async_source_fitting_types  = new Set do =>\n    ( name.replace stf_prefix, '' \\\n      for name in ( GUY.props.keys main.Async_segment::, { hidden: true, } ) \\\n        when name.startsWith stf_prefix )\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_sync_source_fitting  ( x ) ->  sync_source_fitting_types.has @type_of x\n  types.declare.mr_async_source_fitting ( x ) -> async_source_fitting_types.has @type_of x\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_async_duct_fitting\n    isa:        'mr_sync_duct_fitting.or.asyncfunction1.or.asyncfunction2'\n    override:   true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_sync_duct_fitting\n    isa:        'function1.or.function2'\n    override:   true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_reporting_collector ( x ) -> x instanceof main.Reporting_collector\n  types.declare.mr_collector 'list.or.mr_reporting_collector'\n  types.declare.mr_sync_fitting 'mr_sync_duct_fitting.or.mr_sync_source_fitting'\n  types.declare.mr_async_fitting 'mr_async_duct_fitting.or.mr_async_source_fitting'\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_sync_segment_cfg\n    fields:\n      input:    'mr_collector'\n      output:   'mr_collector'\n      fitting:  'mr_sync_fitting'\n    default:\n      input:    null\n      output:   null\n      fitting:  null\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_async_segment_cfg\n    fields:\n      input:    'mr_collector'\n      output:   'mr_collector'\n      fitting:  'mr_async_fitting'\n    default:\n      input:    null\n      output:   null\n      fitting:  null\n\n  #---------------------------------------------------------------------------------------------------------\n  return types\n\n\n############################################################################################################\nmodule.exports = { stf_prefix, get_types, }\n\n\n"
  ]
}