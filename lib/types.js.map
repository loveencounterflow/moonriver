{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,cAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,UAAA,GAA4B;;EAC5B,KAAA,GAA4B,KAnB5B;;;EAsBA,SAAA,GAAY,QAAA,CAAA,CAAA;AACZ,QAAA,IAAA,EAAA;IAAE,IAAgB,aAAhB;AAAA,aAAO,MAAP;;IACA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;IAC5B,IAAA,GAA4B,OAAA,CAAQ,QAAR,EAF9B;;IAKE,oBAAA,GAAwB,IAAI,GAAJ,CAAW,CAAA,CAAA,CAAA,GAAA;AACrC,UAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;AAAM;;AAAA;MAAA,KAAA,qCAAA;;YAEO,IAAI,CAAC,UAAL,CAAgB,UAAhB;uBAFP,IAAI,CAAC,OAAL,CAAa,UAAb,EAAyB,EAAzB;;MAAA,CAAA;;IAD+B,CAAA,GAAX,EAL1B;;IAWE,KAAK,CAAC,OAAO,CAAC,iBAAd,CAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,oBAAoB,CAAC,GAArB,CAAyB,IAAC,CAAA,OAAD,CAAS,CAAT,CAAzB;IAAT,CAAhC,EAXF;;IAcE,KAAK,CAAC,OAAO,CAAC,oBAAd,CAAmC,QAAA,CAAE,CAAF,CAAA;AACrC,UAAA;MAAI,KAAoB,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd,CAApB;AAAA,eAAO,MAAP;;MACA,MAAoB,CAAA,CAAA,WAAK,CAAC,CAAC,OAAP,OAAA,IAAiB,CAAjB,EAApB;AAAA,eAAO,MAAP;;AACA,aAAO;IAH0B,CAAnC,EAdF;;IAoBE,KAAK,CAAC,OAAO,CAAC,sBAAd,CAAqC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,YAAa,IAAI,CAAC;IAA3B,CAArC;IACA,KAAK,CAAC,OAAO,CAAC,YAAd,CAA2B,gCAA3B;IACA,KAAK,CAAC,OAAO,CAAC,UAAd,CAAyB,2CAAzB,EAtBF;;IAyBE,KAAK,CAAC,OAAO,CAAC,cAAd,CACE;MAAA,MAAA,EACE;QAAA,KAAA,EAAU,cAAV;QACA,MAAA,EAAU,cADV;QAEA,OAAA,EAAU;MAFV,CADF;MAIA,OAAA,EACE;QAAA,KAAA,EAAU,IAAV;QACA,MAAA,EAAU,IADV;QAEA,OAAA,EAAU;MAFV;IALF,CADF,EAzBF;;;;;;;AAwCE,WAAO;EAzCG,EAtBZ;;;EAmEA,MAAM,CAAC,OAAP,GAAiB,CAAE,UAAF,EAAc,SAAd;AAnEjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nstf_prefix                = '_source_transform_from_'\ntypes                     = null\n\n#===========================================================================================================\nget_types = ->\n  return types if types?\n  types                     = new ( require 'intertype' ).Intertype()\n  main                      = require './main'\n\n  #---------------------------------------------------------------------------------------------------------\n  source_fitting_types  = new Set do =>\n    ( name.replace stf_prefix, '' \\\n      for name in ( Object.getOwnPropertyNames main.Segment:: ) \\ ### thx to https://stackoverflow.com/a/31055009/7568091 ###\n        when name.startsWith stf_prefix )\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_source_fitting ( x ) -> source_fitting_types.has @type_of x\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_nonsource_fitting ( x ) ->\n    return false unless @isa.function x\n    return false unless 1 <= x.length <= 2\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_reporting_collector ( x ) -> x instanceof main.Reporting_collector\n  types.declare.mr_collector 'list.or.mr_reporting_collector'\n  types.declare.mr_fitting 'mr_nonsource_fitting.or.mr_source_fitting'\n\n  #---------------------------------------------------------------------------------------------------------\n  types.declare.mr_segment_cfg\n    fields:\n      input:    'mr_collector'\n      output:   'mr_collector'\n      fitting:  'mr_fitting'\n    default:\n      input:    null\n      output:   null\n      fitting:  null\n    # create: ( x ) ->\n    #   return x unless @isa.optional.object x\n    #   R         = x\n    #   return R\n\n  #---------------------------------------------------------------------------------------------------------\n  return types\n\n\n############################################################################################################\nmodule.exports = { stf_prefix, get_types, }\n\n\n"
  ]
}