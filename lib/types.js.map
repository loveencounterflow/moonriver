{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\nstf_prefix                = '_source_transform_from_'\n{ Intertype }             = require 'intertype'\nsnyc_types                = null\nasnyc_types               = null\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_sync_source_fitting_types = ->\n  main  = require './main'\n  R     = new Set do =>\n    ( name.replace stf_prefix, '' \\\n      for name in ( GUY.props.keys main.Segment::, { hidden: true, } ) \\\n        when name.startsWith stf_prefix )\n  R.add 'repeatable_source_fitting'\n  R.add 'function0'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_async_source_fitting_types = ->\n  main  = require './main'\n  R     = new Set do =>\n    ( name.replace stf_prefix, '' \\\n      for name in ( GUY.props.keys main.Async_segment::, { hidden: true, } ) \\\n        when name.startsWith stf_prefix )\n  R.add 'repeatable_source_fitting'\n  R.add 'asyncfunction0'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nget_sync_types = ->\n  return sync_types if sync_types?\n  #.........................................................................................................\n  sync_types                = new Intertype()\n  main                      = require './main'\n  { declare }               = sync_types\n  sync_source_fitting_types = get_sync_source_fitting_types()\n  #.........................................................................................................\n  declare.function0       override: true, isa: ( x ) -> ( @isa.function      x ) and ( x.length is 0 )\n  declare.function1       override: true, isa: ( x ) -> ( @isa.function      x ) and ( x.length is 1 )\n  declare.function2       override: true, isa: ( x ) -> ( @isa.function      x ) and ( x.length is 2 )\n  #.........................................................................................................\n  declare.reporting_collector  override: true, isa: ( x ) -> x instanceof main.Reporting_collector\n  declare.collector                            isa: 'list.or.reporting_collector'\n  #.........................................................................................................\n  declare.source_fitting                              isa:  ( x ) -> source_fitting_types.has @type_of x\n  declare.repeatable_source_fitting   override: true, isa: 'function0'\n  declare.observer_fitting            override: true, isa: 'function1'\n  declare.transducer_fitting          override: true, isa: 'function2'\n  declare.duct_fitting                override: true, isa: 'observer_fitting.or.transducer_fitting'\n  declare.fitting                                     isa: 'duct_fitting.or.source_fitting'\n  #.........................................................................................................\n  declare.segment_cfg\n    fields:\n      input:    'collector'\n      output:   'collector'\n      fitting:  'fitting'\n    default:\n      input:    null\n      output:   null\n      fitting:  null\n  #.........................................................................................................\n  return sync_types\n\n\n#=========================================================================================================\nget_async_types = ->\n  return asnyc_types if asnyc_types?\n  #.........................................................................................................\n  async_types               = new Intertype get_sync_types()\n  main                      = require './main'\n  { declare }               = async_types\n  async_source_fitting_types  = get_async_source_fitting_types()\n  #.........................................................................................................\n  declare.asyncfunction0  override: true, isa: ( x ) -> ( @isa.asyncfunction x ) and ( x.length is 0 )\n  declare.asyncfunction1  override: true, isa: ( x ) -> ( @isa.asyncfunction x ) and ( x.length is 1 )\n  declare.asyncfunction2  override: true, isa: ( x ) -> ( @isa.asyncfunction x ) and ( x.length is 2 )\n  #.........................................................................................................\n  declare.source_fitting            ( x ) -> source_fitting_types.has @type_of x\n  declare.repeatable_source_fitting override: true, isa: 'function0.or.asyncfunction0'\n  declare.observer_fitting          override: true, isa: 'function1.or.asyncfunction1'\n  declare.transducer_fitting        override: true, isa: 'function2.or.asyncfunction2'\n  declare.duct_fitting              override: true, isa: 'sync_duct_fitting.or.asyncfunction1.or.asyncfunction2'\n  declare.fitting                                   isa: 'duct_fitting.or.source_fitting'\n  #.........................................................................................................\n  declare.segment_cfg\n    fields:\n      input:    'collector'\n      output:   'collector'\n      fitting:  'fitting'\n    default:\n      input:    null\n      output:   null\n      fitting:  null\n  #.........................................................................................................\n  return types\n\n\n############################################################################################################\nmodule.exports = { stf_prefix, get_sync_types, get_async_types, }\n\n\n"
  ]
}