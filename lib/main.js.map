{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PSEUDO-ARRAY'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nGUY                       = require 'guy'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types\n# { Moonriver }             = require '../../../apps/moonriver'\nUTIL                      = require 'util'\nmisfit                    = Symbol 'misfit'\nsymbol                    = GUY.lft.freeze\n  drop:       Symbol.for 'drop'   # this value will not go to output\n  exit:       Symbol.for 'exit'   # exit pipeline processing\n  # done:       Symbol.for 'done' # done for this iteration\n  over:       Symbol.for 'over'   # do not call again in this round\n\n\n#-----------------------------------------------------------------------------------------------------------\nadd_length_prop = ( target, key ) ->\n  GUY.props.def target, 'length',\n    get:        -> @[ key ].length\n    set: ( x )  -> @[ key ].length = x\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( o, k ) -> R = o[ k ]; delete o[ k ]; return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Duct\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    misfit:       misfit\n    defaults:\n      constructor:\n        on_change:    null\n        is_oblivious: false\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg           = { @constructor.C.defaults.constructor..., cfg..., }\n    @is_oblivious = pluck cfg, 'is_oblivious'\n    @on_change    = pluck cfg, 'on_change'\n    @cfg          = GUY.lft.freeze @cfg\n    @d            = []\n    @transform    = null ### transform to be called when data arrives ###\n    @prv_length   = 0\n    add_length_prop @, 'd'\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _on_change: ->\n    delta       = @length - @prv_length\n    @prv_length = @length\n    @on_change? delta\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_oblivious: ( onoff ) ->\n    validate.boolean onoff\n    throw new Error \"^XXX@1^ cannot set to oblivious unless duct is empty\" if onoff and @length > 0\n    @is_oblivious = onoff\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( x ) ->\n    return null if @is_oblivious\n    R = @d.push x\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  pop: ( fallback = misfit ) ->\n    if @d.length is 0\n      return fallback unless fallback is misfit\n      throw new Error \"^XXX@1^ cannot pop() from empty list\"\n    R = @d.pop()\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  unshift: ( x ) ->\n    return null if @is_oblivious\n    R = @d.unshift x\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  shift: ( fallback = misfit ) ->\n    if @d.length is 0\n      return fallback unless fallback is misfit\n      throw new Error \"^XXX@1^ cannot shift() from empty list\"\n    return null if @is_oblivious\n    R = @d.shift()\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  clear: ->\n    @d.length = 0\n    @_on_change()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  toString:               ->\n    return '[X]' if @is_oblivious\n    return ( rpr @d ) # + ' ➡︎ ' + ( @transform?.name ? './.' )\n  [UTIL.inspect.custom]:  -> @toString()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( raw_transform ) ->\n  # constructor: ( modifiers..., raw_transform ) ->\n  #   throw new Error \"^segment@1^ modifiers not implemented\" if modifiers.length > 0\n    @input            = null\n    @output           = null\n    @modifiers        = null\n    @arity            = null\n    @_is_over         = false\n    @has_exited       = false\n    # @is_listener      = false\n    @is_sender        = false\n    @is_source        = false\n    @transform        = @_transform_from_raw_transform raw_transform\n    GUY.props.def @, '_has_input_data', get: => @input.length > 0\n    GUY.props.def @, 'is_over',         get: => @_is_over\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  set_input: ( duct ) ->\n    @input  = duct\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_output: ( duct ) ->\n    @output  = duct\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_is_over: ( onoff ) ->\n    validate.boolean onoff\n    @_is_over = onoff\n    return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _transform_from_raw_transform: ( raw_transform ) ->\n    { is_sender\n      is_source\n      is_repeatable\n      modifications\n      transform     } = @_get_transform raw_transform\n    @arity            = transform.length\n    # @is_listener       = not ( modifications.do_once_before or modifications.do_once_after )\n    @modifications    = {} ### !!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    @is_sender        = is_sender\n    @is_source        = is_source\n    @is_repeatable    = is_repeatable\n    #...................................................................................................\n    if @is_sender\n      if @modifications.do_once_after\n        throw new Error \"^moonriver@2^ transforms with modifier once_after cannot be senders\"\n      @call = ( d, _ ) =>\n        @send.call_count++\n        if ( @send.call_count is 1 ) and @modifications.do_first\n          @transform @modifications.first, @send\n        @transform d, @send\n        return null\n    #...................................................................................................\n    else\n      @call = ( d, forward = true ) =>\n        @send.call_count++\n        if ( @send.call_count is 1 ) and @modifications.do_first\n          @transform @modifications.first\n        @transform d\n        @send d if forward \\\n          and ( not @modifications.do_once_before ) and ( not @modifications.do_once_after )\n        return null\n    #...................................................................................................\n    # call        = call.bind segment\n    @send = ( d ) =>\n      switch d\n        when symbol.drop  then  null\n        when symbol.over  then  @set_is_over true\n        when symbol.exit  then  @has_exited = true\n        else\n          throw new Error \"^moonriver@3^ cannot send values after pipeline has terminated;\" \\\n            + \"error occurred in transform idx #{idx} (#{rpr segment.transform.name})\" if @is_over\n          @output.push d\n      return null\n    #...................................................................................................\n    # send            = send.bind segment\n    @send.symbol      = symbol\n    @send.over        = => @send symbol.over\n    @send.exit        = => @send symbol.exit\n    @send.call_count  = 0\n    # GUY.props.hide segment, 'send', send\n    # GUY.props.hide segment, 'call', call\n    # @pipeline.push        segment\n    # @on_once_before.push  segment if modifications.do_once_before\n    # @on_once_after.push   segment if modifications.do_once_after\n    # @on_last.push         segment if modifications.do_last\n    # @sources.push         segment if is_source\n    # @inputs.push    input\n    return transform\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _get_transform: ( raw_transform ) ->\n    if ( type_of raw_transform ) is 'XXXXXXXXXXXXXXXXXtransform_with_modifications'\n      modifications = raw_transform.modifications\n      transform     = @_get_transform_2 raw_transform.transform\n    else\n      modifications = {}\n      transform     = @_get_transform_2 raw_transform\n    #.......................................................................................................\n    return { modifications, transform..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transform_2: ( raw_transform ) ->\n    is_source     = false\n    is_sender     = true\n    is_repeatable = true\n    switch type = type_of raw_transform\n      when 'function'\n        switch ( arity = raw_transform.length )\n          when 0\n            throw new Error \"^moonriver@4^ zero-arity transform not implemented\"\n          when 1\n            is_sender = false\n            transform = raw_transform\n          when 2\n            transform = raw_transform\n          else\n            throw new Error \"^moonriver@5^ expected function with arity 2 got one with arity #{arity}\"\n      when 'generatorfunction'\n        is_source       = true\n        transform       = @_source_from_generatorfunction raw_transform\n        unless ( arity = transform.length ) is 2\n          throw new Error \"^moonriver@6^ expected function with arity 2 got one with arity #{arity}\"\n      when 'list'\n        is_source       = true\n        transform       = @_source_from_list raw_transform\n      else\n        if ( type is 'generator' ) or ( isa.function raw_transform[ Symbol.iterator ] )\n          is_repeatable   = false\n          is_source       = true\n          transform       = @_source_from_generator raw_transform\n          unless ( arity = transform.length ) is 2\n            throw new Error \"^moonriver@7^ expected function with arity 2 got one with arity #{arity}\"\n        else\n          throw new Error \"^moonriver@8^ cannot convert a #{type} to a source\"\n    transform = transform.bind @\n    return { is_sender, is_source, is_repeatable, transform, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_generatorfunction: ( generatorfunction ) ->\n    generator = null\n    return generatorfunction_source = ( d, send ) ->\n      generator ?= generatorfunction()\n      send d\n      { value\n        done  } = generator.next()\n      ### NOTE silently discards value of `return` where present in keeping with JS `for of` loops ###\n      return send value unless done\n      generator = null\n      send.over()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_generator: ( generator ) ->\n    return generator_source = ( d, send ) ->\n      send d\n      { value\n        done  } = generator.next()\n      ### NOTE silently discards value of `return` where present in keeping with JS `for of` loops ###\n      return send value unless done\n      send.over()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_list: ( list ) ->\n    last_idx  = list.length - 1\n    idx       = -1\n    return list_source = ( d, send ) ->\n      send d\n      idx++\n      if idx > last_idx\n        idx = -1\n        return send.over()\n      send list[ idx ]\n      return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _name_of_transform: ->\n    return '???'    unless @transform?\n    return '(anon)' unless @transform.name?\n    return @transform.name.replace /^bound /, ''\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               ->\n    parts = []\n    parts.push ( rpr @input ) + ' ➡︎ '\n    parts.push @_name_of_transform() + ' ➡︎ ' + ( rpr @output )\n    return parts.join ' '\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Moonriver\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( transforms = null ) ->\n    @data_count     = 0\n    @segments       = []\n    @turns          = 0\n    @inputs         = []\n    @sources        = []\n    # @on_last        = []\n    # @on_once_before = []\n    # @on_once_after  = []\n    @user           = {} ### user area for sharing state between transforms, etc ###\n    add_length_prop @, 'segments'\n    @push transform for transform from transforms if transforms?\n    #.......................................................................................................\n    GUY.props.def @, 'sources_are_repeatable',  get: => @sources.every ( x ) -> x.is_repeatable\n    GUY.props.def @, 'can_repeat',              get: => @turns is 0 or @is_repeatable\n    GUY.props.def @, 'first_segment',           get: => @segments[ 0 ]\n    GUY.props.def @, 'last_segment',            get: => @segments[ @segments.length - 1 ]\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( transform ) ->\n    segment = new Segment transform\n    if ( last_segment = @last_segment )?\n      segment.set_input last_segment.output\n      last_segment.output.set_oblivious false\n    else\n      segment.set_input new Duct { on_change: @on_change, }\n    segment.set_output new Duct { on_change: @on_change, is_oblivious: true, }\n    @segments.push  segment\n    @sources.push   segment if segment.is_source\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  on_change: ( delta ) =>\n    @data_count += delta\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield segment for segment in @segments; return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _on_drive_start: ->\n    return false unless @sources_are_repeatable\n    @turns++\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  drive: ( cfg ) ->\n    ### TAINT validate `cfg` ###\n    throw new Error \"^moonriver@9^ pipeline is not repeatable\" unless @_on_drive_start()\n    return null if @segments.length is 0\n    defaults        = { mode: 'depth', continue: false, }\n    cfg             = { defaults..., cfg..., }\n    segment.set_is_over false for segment in @segments unless cfg.continue\n    do_exit         = false\n    #.......................................................................................................\n    ###\n    for segment in @on_once_before\n      segment.call segment.modifications.once_before\n    ###\n    #.......................................................................................................\n    loop\n      whisper '^534-1^', '-----------------------------'\n      for segment, idx in @segments\n        # urge '^534-2^', idx, @\n        # debug '^534-2^', idx, segment\n        #...................................................................................................\n        # if ( segment.is_over or not segment.is_listener )\n        if segment.is_over\n          ### If current segment has signalled it's gone out of business for this lap or is not a listener\n          in the first place, route all data on its input queue to its output queue: ###\n          ### TAINT rewrite to single step operation using Array::splice() ###\n          ### TAINT taking non-listeners out of the pipeline would speed this up but also somehwat\n          complicate the construction ###\n          segment.output.push segment.input.shift() while segment.input.length > 0\n          continue\n        #...................................................................................................\n        # if segment.is_source then debug '^592^', { has_input_data: segment._has_input_data}\n        if segment.is_source and not segment._has_input_data\n          ### If current segment is a source and no inputs are waiting to be sent, trigger the transform by\n          calling  with a discardable `drop` value: ###\n          segment.call symbol.drop\n        #...................................................................................................\n        else\n          ### Otherwise, call transform with next value from input queue, if any; when in operational mode\n          `breadth`, repeat until input queue is empty: ###\n          # debug '^309-4^', segment.input\n          while segment.input.length > 0\n            segment.call segment.input.shift()\n            break if cfg.mode is 'depth'\n        #...................................................................................................\n        ### Stop processing if the `exit` signal has been received: ###\n        if segment.exit then do_exit = true; break\n      break if do_exit\n      #.....................................................................................................\n      ### When all sources have called it quits and no more input queues have data, end processing: ###\n      ### TAINT collect stats in above loop ###\n      if @sources.every ( source ) -> source.is_over\n        if @data_count is 0\n        # unless @inputs.some ( input ) -> input.length > 0\n          # debug '^453453^', \"recognized pipeline exhausted\"\n          # debug '^453453^', @segments[ 2 ].send Symbol.for 'before_last'\n          # continue\n          break\n    # #.......................................................................................................\n    # ### Call all transforms that have the `last` modifier, then all transforms with the `once_after`\n    # modifier, skipping those that have signalled `over` or `exit`: ###\n    # ### TAINT make `last` and `once_after` mutually exclusive ###\n    # for segment in @on_last\n    #   continue if segment.is_over or segment.exit\n    #   segment.is_over = true\n    #   segment.call segment.modifications.last, false\n    # #.......................................................................................................\n    # for segment in @on_once_after\n    #   continue if segment.is_over or segment.exit\n    #   segment.is_over = true\n    #   segment.call segment.modifications.once_after, false\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  send: ( d ) ->\n    @segments[ 0 ].input.push d\n    @drive { continue: true, }\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  toString:               -> rpr @segments\n  [UTIL.inspect.custom]:  -> @toString()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_2 = ->\n  mr1 = new Moonriver()\n  mr2 = new Moonriver()\n  #.........................................................................................................\n  mr1.push [ 1, 4, ]\n  mr1.push [ 2, 5, 7, ]\n  mr1.push [ 3, 6, ]\n  mr1.push ( d ) -> yield e for e in Array.from 'abc'\n  # mr1.push show      = ( d ) -> help CND.reverse '^332-1^', d\n  mr1.push show     = ( d ) -> help CND.reverse '^332-2^', d\n  # mr1.push tee      = ( d, send ) -> mr2.send d; send d\n  # mr1.push multiply = ( d, send ) -> send d * 100\n  # mr1.push tee      = ( d, send ) -> mr2.send d; send d\n  # mr1.push show     = ( d ) -> urge CND.reverse '^332-2^', d\n  # #.........................................................................................................\n  # mr2.push add      = ( d, send ) -> send d + 300\n  # mr2.push show     = ( d ) -> info CND.reverse '^332-3^', d\n  # #.........................................................................................................\n  # mr1.drive()\n  ### can send additional inputs: ###\n  help '^343-1^', mr1\n  help '^343-1^', mr2\n  # mr1.send Symbol.for 'exit'\n  mr1.send Symbol.for 'drop'\n  # mr1.send 100\n  help '^343-2^', mr1\n  # mr1.send 200\n  # help '^343-3^', mr1\n  # mr1.drive { continue: true, }\n  # help '^343-4^', mr1\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo_2()\n  # f = -> return @a\n  # d = { a: 42, f, }\n  # e = GUY.lft.freeze d\n  # info d.f()\n  # info e.f()\n  # info f == d.f == e.f\n\n\n\n\n"
  ]
}