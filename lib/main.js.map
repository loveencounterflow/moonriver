{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/MAIN'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nUTIL                      = require 'node:util'\n{ hide\n  def }                   = GUY.props\nnameit                    = ( name, f ) -> def f, 'name', { value: name, }\n{ misfit\n  stf_prefix\n  get_base_types\n  get_sync_types\n  get_async_types\n  get_transform_types   } = require './types'\nstf                       = ( name ) -> stf_prefix + ( if Array.isArray name then name[ 0 ] else name )\ntransforms                = require './transforms'\nnoop                      = ->\nentries                   = ( φ ) -> ( -> yield [ k, v, ] for k, v of φ )()\n\n\n#===========================================================================================================\nclass Reporting_collector\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( callback ) ->\n    hide @, 'callback', callback\n    hide @, 'd',        []\n    GUY.props.def @,  'length',   get: ( -> @d.length ), set: ( ( x ) -> @d.length = x )\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  push:        ( d ) -> @callback +1; @d.push d\n  unshift:     ( d ) -> @callback +1; @d.unshift d\n  pop:               -> @callback -1; @d.pop()\n  shift:             -> @callback -1; @d.shift()\n  [Symbol.iterator]: -> yield from @d\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> rpr @d\n\n\n\n############################################################################################################\n# SYNC\n#===========================================================================================================\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:                     get_sync_types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    clasz             = @constructor\n    hide @, 'types', clasz.type_getter()\n    @types.create.segment_cfg cfg\n    @host             = cfg.host\n    @protocol         = cfg.protocol\n    @input            = cfg.input\n    @output           = cfg.output\n    @has_finished     = null\n    @role   = null\n    @_on_before_walk  = noop\n    @first            = cfg.modifiers.first\n    @last             = cfg.modifiers.last\n    @_set_transform cfg.fitting\n    hide @, '_send', send = ( d ) => @output.push d; d ### 'inner' send method ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_transform: ( fitting ) ->\n    sigil = null\n    #.......................................................................................................\n    fitting_type      = @types.type_of fitting\n    { role\n      transform     } = @_transform_from_fitting fitting_type, fitting\n    #.......................................................................................................\n    name            = if transform.name is '' then 'ƒ' else transform.name\n    nameit name, transform\n    @has_finished   = false if role is 'source'\n    @role = role\n    hide @, 'transform', transform\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _transform_from_fitting: ( type, source ) ->\n    unless ( method = @[stf type] )?\n      throw new Error \"^mr.e#2^ unable to convert a #{type} to a transform\"\n    return method.call @, source\n\n  #---------------------------------------------------------------------------------------------------------\n  ### NOTE in the below code, `φ` has been used as an abbreviation for 'fitting' ###\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'producer_fitting']: ( φ ) ->\n    @_on_before_walk  = ->\n      source          = φ()\n      @transform      = ( @_transform_from_fitting ( @types.type_of source ), source ).transform\n      @has_finished   = false\n      return null\n    return { role: 'source', transform: φ, }\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'generator']: ( φ ) ->\n    transform = ( send ) =>\n      return null if @has_finished\n      dsc           = φ.next()\n      @has_finished = dsc.done\n      send dsc.value unless @has_finished\n      return null\n    return { role: 'source', transform, }\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'text']: ( φ ) ->\n    letter_re = /./uy\n    transform = nameit '√txt', ( send ) =>\n      return null if @has_finished\n      unless ( match = φ.match letter_re )?\n        @has_finished = true\n        return null\n      send match[ 0 ]\n      return null\n    return { role: 'source', transform, }\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'generatorfunction']:   ( φ ) -> @[stf'generator'] φ()\n  [stf'arrayiterator']:       ( φ ) -> @[stf'generator'] φ\n  [stf'setiterator']:         ( φ ) -> @[stf'generator'] φ\n  [stf'mapiterator']:         ( φ ) -> @[stf'generator'] φ\n  #.........................................................................................................\n  [stf'transducer_fitting']:  ( φ ) -> { role: 'transducer',  transform: φ, }\n  [stf'observer_fitting']:    ( φ ) -> { role: 'observer',    transform: φ, }\n  #.........................................................................................................\n  [stf'list']:   ( φ ) -> R = @[stf'generator'] φ.values();  R.transform = nameit '√lst', R.transform; R\n  [stf'object']: ( φ ) -> R = @[stf'generator'] entries φ;   R.transform = nameit '√obj', R.transform; R\n  [stf'set']:    ( φ ) -> R = @[stf'generator'] φ.values();  R.transform = nameit '√set', R.transform; R\n  [stf'map']:    ( φ ) -> R = @[stf'generator'] φ.entries(); R.transform = nameit '√map', R.transform; R\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  ### 'outer' send method ###\n  send: ( d ) -> @input.push d; d\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    if @role is 'source'\n      @_send @input.shift() while @input.length > 0 ### TAINT could be done with `.splice()` ###\n      return 0 if @transform.has_finished\n      @transform @_send\n      return 1\n    if @input.length > 0\n      d = @input.shift()\n      switch @role\n        when 'observer'\n          @protocol { segment: @, d, }\n          @transform  d\n          @_send      d\n        when 'transducer'\n          @protocol { segment: @, d, }\n          @transform d, @_send\n        else\n          throw new Error \"^mr.e#3^ internal error: unknown segment role #{rpr @role}\"\n      return 1\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> \"#{rpr @input} ▶ #{@transform.name} ▶ #{rpr @output}\"\n\n\n#===========================================================================================================\nclass Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:   get_sync_types\n  @segment_class: Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    clasz             = @constructor\n    hide  @, 'types',   clasz.type_getter()\n    cfg               = @types.create.pipeline_cfg cfg\n    @protocol         = switch cfg.protocol\n      when true   then  @protocol\n      when false  then  ->\n      else              cfg.protocol\n    @datacount        = 0\n    @input            = @_new_collector()\n    @output           = [] ### pipeline output buffer does not participate in datacount ###\n    @segments         = []\n    hide  @, '$',             nameit '$', @_segment_from_fitting.bind @\n    def   @, 'sources',       get: -> Object.freeze ( s for s in @segments when s.role is 'source' )\n    def   @, 'has_finished',  get: -> ( @datacount < 1 ) and @sources.every ( s ) -> s.has_finished\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_collector:                   -> new Reporting_collector ( delta ) => @datacount += delta\n\n  #---------------------------------------------------------------------------------------------------------\n  protocol: ( xxx ) ->\n    debug '^3234^', \"protocol\", xxx\n    return null\n\n  #=========================================================================================================\n  # BUILDING PIPELINE FROM SEGMENTS\n  #---------------------------------------------------------------------------------------------------------\n  _get_modifiers_and_fitting: ( modifiers, fitting ) ->\n    switch arity = arguments.length\n      when 1 then [ modifiers, fitting, ] = [ null, modifiers, ]\n      when 2 then null\n      else throw new Error \"^mr.e#5^ expected 1 or 2 arguments, got #{arity}\"\n    modifiers = @types.create.modifiers modifiers\n    return [ modifiers, fitting, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _segment_from_fitting: ( P... ) ->\n    [ modifiers\n      fitting   ] = @_get_modifiers_and_fitting P...\n    return @_segment_from_fitting fitting.values... if @types.isa.proto_segment fitting\n    ### TAINT consider to move this code to `Segment` class ###\n    if ( count = @segments.length ) is 0\n      input               = @input\n      output              = @output\n    else\n      prv_segment         = @segments[ count - 1 ]\n      prv_segment.output  = @_new_collector()\n      input               = prv_segment.output\n      output              = @output\n    #.......................................................................................................\n    if @types.isa.segment fitting\n      R         = fitting\n      R.input   = input\n      R.output  = output\n    else\n      segment_cfg = { host: @, protocol: @protocol, modifiers, input, fitting, output, }\n      try R = new @constructor.segment_class segment_cfg catch error\n        error.message = error.message + \"\\n\\n^mr.e#4^ unable to convert a #{@types.type_of fitting} into a segment\"\n        throw error\n    ### TAINT this part should be simplified; we do it so methods `Segment::_transform_from_$type()` can\n    make use of the global `$()` method to define transforms. ###\n    return @_segment_from_fitting R.transform.values... if @types.isa.proto_segment R.transform\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( P... ) ->\n    if @types.isa.sync_pipeline R = P[ 0 ]\n      @push segment for segment in R.segments\n    else\n      @segments.push R = @_segment_from_fitting P...\n    return R\n\n\n  #=========================================================================================================\n  # SENDING DATA\n  #---------------------------------------------------------------------------------------------------------\n  send: ( d ) -> @input.push d; d\n\n\n  #=========================================================================================================\n  # PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    for segment, segment_idx in @segments\n      segment.process()\n    return null\n\n\n  #=========================================================================================================\n  # ITERATING OVER AND RETRIEVING RESULTS\n  #---------------------------------------------------------------------------------------------------------\n  run: -> ( d for d from @walk() )\n  walk: ->\n    @before_walk()\n    yield from @_walk()\n    @prepare_after_walk()\n    yield from @_walk() unless @has_finished\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  before_walk: ->\n    @push ( nameit '(dummy)', ( d ) -> ) if @segments.length is 0\n    segment._on_before_walk()   for segment in @segments\n    segment.send segment.first  for segment in @segments when segment.first isnt misfit\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_after_walk: ->\n    segment.send segment.last   for segment in @segments when segment.last isnt misfit\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk: ->\n    loop\n      @process()\n      yield d for d in @output\n      @output.length = 0\n      break if @has_finished\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_named_pipelines: ( P... ) -> @constructor.walk_named_pipeline P...\n\n  #---------------------------------------------------------------------------------------------------------\n  @walk_named_pipelines: ( named_pipelines ) ->\n    types = get_sync_types()\n    types.validate.object.or.list named_pipelines\n    #.......................................................................................................\n    switch type = types.type_of named_pipelines\n      when 'object'\n        names     = Object.keys named_pipelines\n        pipelines = ( v for k, v of named_pipelines )\n      when 'list'\n        names     = ( idx for _, idx in named_pipelines )\n        pipelines = named_pipelines\n    #.......................................................................................................\n    process = ->\n      loop\n        for pipeline, idx in pipelines\n          name = names[ idx ]\n          pipeline.process()\n          yield { name, data, } for data from pipeline.output\n          pipeline.output.length = 0\n        break if pipelines.every ( pipeline ) -> pipeline.has_finished\n      return null\n    #.......................................................................................................\n    pipeline.before_walk() for pipeline in pipelines\n    yield from process()\n    pipeline.prepare_after_walk() for pipeline in pipelines\n    yield from process()\n    #.......................................................................................................\n    return null\n\n  #=========================================================================================================\n  # CLI REPRESENTATION\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               ->\n    R = []\n    for segment in @segments\n      R.push rpr segment.input\n      R.push '▶'\n      R.push segment.transform.name\n      R.push '▶'\n    R.push rpr @output\n    return R.join ' '\n\n\n############################################################################################################\n# ASYNC\n#===========================================================================================================\nclass Async_segment extends Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:                     get_async_types\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    if @role is 'source'\n      @_send @input.shift() while @input.length > 0 ### TAINT could be done with `.splice()` ###\n      return 0 if @transform.has_finished\n      await @transform @_send\n      return 1\n    if @input.length > 0\n      d = @input.shift()\n      d = await d if d instanceof Promise\n      switch @role\n        when 'observer'\n          await @transform  d\n          @_send      d\n        when 'transducer'\n          await @transform d, @_send\n        else\n          throw new Error \"^mr.e#5^ internal error: unknown transform type #{rpr @role}\"\n      return 1\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'asyncgeneratorfunction']: ( φ ) -> @[stf'asyncgenerator'] φ()\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'asyncgenerator']: ( φ ) ->\n    transform = ( send ) =>\n      return null if @has_finished\n      dsc           = await φ.next()\n      @has_finished = dsc.done\n      send dsc.value unless @has_finished\n      return null\n    return { role: 'source', transform, }\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'nodejs_readstream']: ( φ ) ->\n    { Receiver }  = require 'jfee'\n    rcv           = Receiver.from_readstream φ, { bare: true, }\n    transform     = nameit '√readstream', ( @[stf'asyncgenerator'] rcv ).transform\n    return { role: 'source', transform, }\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'nodejs_writestream']: ( φ ) ->\n    last = Symbol 'last'\n    return role: 'observer', transform: $ { last, }, ( d ) ->\n      if d is last\n        return await new Promise ( resolve ) ->\n          φ.end -> resolve()\n          # φ.close()\n      return await new Promise ( resolve ) ->\n        φ.write d, -> resolve()\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'async_pipeline']: ( φ ) ->\n    transform = nameit 'pipeline', ( d, send ) ->\n      φ.send d\n      send e for e in await φ.run()\n      return null\n    return { role: 'transducer', transform, }\n\n\n\n#===========================================================================================================\nclass Async_pipeline extends Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:                     get_async_types\n  @segment_class:                   Async_segment\n\n  #=========================================================================================================\n  # PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    for segment, segment_idx in @segments\n      await segment.process()\n    return null\n\n  #=========================================================================================================\n  # CLI REPRESENTATION\n  #---------------------------------------------------------------------------------------------------------\n  run: -> ( d for await d from @walk() )\n  walk: ->\n    @push ( nameit '(dummy)', ( d ) -> ) if @segments.length is 0\n    await segment._on_before_walk() for segment in @segments\n    loop\n      await @process()\n      yield ( if d instanceof Promise then await d else d ) for d in @output\n      @output.length = 0\n      break if @has_finished\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  @walk_named_pipelines: ( named_pipelines ) ->\n    types = get_async_types()\n    types.validate.object.or.list named_pipelines\n    #.......................................................................................................\n    switch type = types.type_of named_pipelines\n      when 'object'\n        names     = Object.keys named_pipelines\n        pipelines = ( v for k, v of named_pipelines )\n      when 'list'\n        names     = ( idx for _, idx in named_pipelines )\n        pipelines = named_pipelines\n    #.......................................................................................................\n    process = ->\n      loop\n        for pipeline, idx in pipelines\n          name = names[ idx ]\n          await pipeline.process()\n          yield { name, data, } for data from pipeline.output\n          pipeline.output.length = 0\n        break if pipelines.every ( pipeline ) -> pipeline.has_finished\n      return null\n    #.......................................................................................................\n    pipeline.before_walk() for pipeline in pipelines\n    await yield from process()\n    pipeline.prepare_after_walk() for pipeline in pipelines\n    await yield from process()\n    #.......................................................................................................\n    return null\n\n\n############################################################################################################\n# HELPERS\n#===========================================================================================================\nclass Proto_segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    @values = P\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\n$ = ( modifiers, fitting ) ->\n  new Proto_segment modifiers, fitting\n\n\n############################################################################################################\nmodule.exports = {\n  Pipeline\n  Segment\n  Async_pipeline\n  Async_segment\n  Reporting_collector\n  transforms\n  Proto_segment\n  $\n  get_base_types\n  get_sync_types\n  get_async_types\n  get_transform_types\n  misfit }\n\n"
  ]
}