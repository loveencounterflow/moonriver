{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOONRIVER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nGUY                       = require 'guy'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_optional }     = types\n# { Moonriver }             = require '../../../apps/moonriver'\nUTIL                      = require 'util'\n\n#-----------------------------------------------------------------------------------------------------------\nsymbol                    = GUY.lft.freeze\n  misfit:     Symbol.for 'misfit' # indicates missing value\n  drop:       Symbol.for 'drop'   # this value will not go to output\n  exit:       Symbol.for 'exit'   # exit pipeline processing\n  # done:       Symbol.for 'done' # done for this iteration\n  over:       Symbol.for 'over'   # do not call again in this round\n\n#-----------------------------------------------------------------------------------------------------------\nadd_length_prop = ( target, key ) ->\n  GUY.props.def target, 'length',\n    get:        -> @[ key ].length\n    set: ( x )  -> @[ key ].length = x\n\n#-----------------------------------------------------------------------------------------------------------\npluck = ( o, k, fallback = symbol.misfit ) ->\n  R = o[ k ]\n  delete o[ k ]\n  if R is undefined\n    return fallback unless fallback is symbol.misfit\n    throw new Error \"^moonriver@1^ unknown property #{rpr k}\"\n  return R\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrv_modifiers', tests:\n  \"@isa.object x\":                        ( x ) -> @isa.object x\n  \"@isa.boolean x.is_source\":             ( x ) -> @isa.boolean x.is_source\n  \"@isa.boolean x.once_before_first\":     ( x ) -> @isa.boolean x.once_before_first\n  \"@isa.boolean x.once_after_last\":       ( x ) -> @isa.boolean x.once_after_last\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mirage_cfg', tests:\n  \"@isa.object x\":                        ( x ) -> @isa.object x\n  \"@isa_optional.list x.protocol\":        ( x ) -> @isa_optional.list x.protocol\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'drive_cfg', tests:\n  \"@isa.object x\":                        ( x ) -> @isa.object x\n  \"@isa.integer x.first_idx\":             ( x ) -> @isa.integer x.first_idx\n  \"@isa.integer x.last_idx\":              ( x ) -> @isa.integer x.last_idx\n  \"x.mode in [ 'breadth', 'depth', ]\":    ( x ) -> x.mode in [ 'breadth', 'depth', ]\n  \"@isa.boolean x.resume\":                ( x ) -> @isa.boolean x.resume\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Duct\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      constructor:\n        on_change:    null\n        is_oblivious: false\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg           = { @constructor.C.defaults.constructor..., cfg..., }\n    @is_oblivious = pluck cfg, 'is_oblivious'\n    @on_change    = pluck cfg, 'on_change'\n    @cfg          = GUY.lft.freeze @cfg\n    @d            = []\n    @transform    = null ### transform to be called when data arrives ###\n    @prv_length   = 0\n    add_length_prop @, 'd'\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _on_change: ->\n    delta       = @length - @prv_length\n    @prv_length = @length\n    @on_change? delta\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_oblivious: ( onoff ) ->\n    validate.boolean onoff\n    throw new Error \"^moonriver@2^ cannot set to oblivious unless duct is empty\" if onoff and @length > 0\n    @is_oblivious = onoff\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( x ) ->\n    return null if @is_oblivious\n    R = @d.push x\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  pop: ( fallback = symbol.misfit ) ->\n    if @d.length is 0\n      return fallback unless fallback is symbol.misfit\n      throw new Error \"^moonriver@3^ cannot pop() from empty list\"\n    R = @d.pop()\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  unshift: ( x ) ->\n    return null if @is_oblivious\n    R = @d.unshift x\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  shift: ( fallback = symbol.misfit ) ->\n    if @d.length is 0\n      return fallback unless fallback is symbol.misfit\n      throw new Error \"^moonriver@4^ cannot shift() from empty list\"\n    return null if @is_oblivious\n    R = @d.shift()\n    @_on_change()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  clear: ->\n    @d.length = 0\n    @_on_change()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield d for d in @d; return null\n\n  #---------------------------------------------------------------------------------------------------------\n  toString:               ->\n    return '[X]' if @is_oblivious\n    return ( rpr @d ) # + ' ➡︎ ' + ( @transform?.name ? './.' )\n  [UTIL.inspect.custom]:  -> @toString()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( moonriver, raw_transform, idx, protocol = null ) ->\n  # constructor: ( modifiers..., raw_transform ) ->\n  #   throw new Error \"^segment@1^ modifiers not implemented\" if modifiers.length > 0\n    @moonriver        = moonriver\n    validate_optional.list protocol\n    @protocol         = protocol\n    @idx              = idx\n    @call_count       = 0\n    @input            = null\n    @output           = null\n    @modifiers        = null\n    @arity            = null\n    @_is_over         = false\n    @has_exited       = false\n    # @is_listener      = false\n    @is_sender        = false\n    @is_source        = false\n    @transform        = @_transform_from_raw_transform raw_transform\n    GUY.props.def @, '_has_input_data', get: => @input.length > 0\n    GUY.props.def @, 'is_over',         get: => @_is_over\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  set_input: ( duct ) ->\n    @input = duct\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_output: ( duct ) ->\n    @output = duct\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_is_over: ( onoff ) ->\n    validate.boolean onoff\n    @_is_over = onoff\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  set_call_count: ( call_count ) ->\n    validate.cardinal call_count\n    @call_count = call_count\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _transfer: ->\n    @output.push @input.shift() while @input.length > 0\n    return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _transform_from_raw_transform: ( raw_transform ) ->\n    { is_sender\n      is_source\n      is_repeatable\n      modifiers\n      transform     } = @_get_transform raw_transform\n    @arity            = transform.length\n    # @is_listener       = not ( modifiers.do_once_before or modifiers.do_once_after )\n    ### TAINT do not treat modifier `is_source` different from others ###\n    @is_source        = is_source or ( pluck modifiers, 'is_source', false )\n    @modifiers        = modifiers\n    @is_sender        = is_sender\n    @is_repeatable    = is_repeatable\n    #...................................................................................................\n    if @is_sender\n      if @modifiers.once_before_first or @modifiers.once_after_last\n        @call = ( d ) =>\n          @call_count++\n          @transform @send\n          return null\n      else\n        @call = ( d ) =>\n          @call_count++\n          @transform d, @send\n          return null\n    #...................................................................................................\n    else\n      @call = ( d, forward = true ) =>\n        @call_count++\n        @transform d\n        @send d if forward\n        return null\n    #...................................................................................................\n    send = ( d ) =>\n      switch d\n        when symbol.drop  then  null\n        when symbol.over  then  @set_is_over true\n        when symbol.exit  then  @has_exited = true\n        else\n          if @is_over\n            throw new Error \"^moonriver@5^ cannot send values after pipeline has terminated; \" \\\n              + \"error occurred in segment idx #{@idx} (#{rpr @_name_of_transform()})\"\n          @output.push d\n      return null\n    #...................................................................................................\n    if @protocol?\n      @send = ( d ) =>\n        send d\n        p         = { idx: @idx, call_count: @call_count, turns: @moonriver.turns, d, }\n        p[ idx ]  = ( if idx is @idx then d else null ) for idx in [ 0 ... @moonriver.length ]\n        @protocol.push p\n        return null\n    else\n      @send = send\n    #...................................................................................................\n    @send.symbol      = symbol\n    @send.over        = => @send symbol.over\n    @send.exit        = => @send symbol.exit\n    return transform\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _get_transform: ( raw_transform ) ->\n    if ( type_of raw_transform ) is 'modified_transform'\n      modifiers = raw_transform.modifiers\n      transform = @_get_transform_2 raw_transform.transform, modifiers\n    else\n      modifiers = {}\n      transform = @_get_transform_2 raw_transform, modifiers\n    #.......................................................................................................\n    return { modifiers, transform..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transform_2: ( raw_transform, modifiers ) ->\n    is_source     = false\n    is_sender     = true\n    is_repeatable = true\n    switch type = type_of raw_transform\n      when 'function'\n        switch ( arity = raw_transform.length )\n          when 1\n            is_sender = modifiers.once_before_first or modifiers.once_after_last\n            transform = raw_transform\n          when 2\n            if modifiers.once_before_first or modifiers.once_after_last\n              throw new Error \"^moonriver@6^ transform with arity 2 not implemented for modifiers \" \\\n                + \"once_before_first, once_after_last\"\n            transform = raw_transform\n          else\n            throw new Error \"^moonriver@7^ transform with arity #{arity} not implemented\"\n      when 'generatorfunction'\n        is_source       = true\n        transform       = @_source_from_generatorfunction raw_transform\n        unless ( arity = transform.length ) is 2\n          throw new Error \"^moonriver@8^ expected function with arity 2 got one with arity #{arity}\"\n      when 'list'\n        is_source       = true\n        transform       = @_source_from_list raw_transform\n      else\n        if ( type is 'generator' ) or ( isa.function raw_transform[ Symbol.iterator ] )\n          is_repeatable   = false\n          is_source       = true\n          transform       = @_source_from_generator raw_transform\n          unless ( arity = transform.length ) is 2\n            throw new Error \"^moonriver@9^ expected function with arity 2 got one with arity #{arity}\"\n        else\n          throw new Error \"^moonriver@10^ cannot convert a #{type} to a source\"\n    transform = transform.bind @\n    return { is_sender, is_source, is_repeatable, transform, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_generatorfunction: ( generatorfunction ) ->\n    generator = null\n    return genfΔ = ( d, send ) ->\n      generator ?= generatorfunction()\n      send d unless d is symbol.drop\n      { value\n        done  } = generator.next()\n      ### NOTE silently discards value of `return` where present in keeping with JS `for of` loops ###\n      return send value unless done\n      generator = null\n      send.over()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_generator: ( generator ) ->\n    return genΔ = ( d, send ) ->\n      send d unless d is symbol.drop\n      { value\n        done  } = generator.next()\n      ### NOTE silently discards value of `return` where present in keeping with JS `for of` loops ###\n      return send value unless done\n      send.over()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_list: ( list ) ->\n    last_idx  = list.length - 1\n    idx       = -1\n    return listΔ = ( d, send ) ->\n      send d unless d is symbol.drop\n      idx++\n      if idx > last_idx\n        idx = -1\n        return send.over()\n      send list[ idx ]\n      return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _name_of_transform: ->\n    return '???'    unless @transform?\n    return '(anon)' unless @transform.name?\n    return @transform.name.replace /^bound /, ''\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               ->\n    parts = []\n    parts.push ( rpr @input ) + ' ➡︎ '\n    parts.push @_name_of_transform() + ' ➡︎ ' + ( rpr @output )\n    return parts.join ' '\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Modified_transform\n\n  #---------------------------------------------------------------------------------------------------------\n  @C = GUY.lft.freeze\n    known_modifications: new Set [\n      'is_source',\n      'first', 'last',\n      'once_after_last', 'once_before_first', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( modifiers..., transform ) ->\n    defaults    =\n      is_source:          false\n      once_before_first:  false\n      once_after_last:    false\n      first:              symbol.misfit\n      last:               symbol.misfit\n    @modifiers  = { defaults..., ( Object.assign {}, modifiers... )..., }\n    validate.mrv_modifiers @modifiers\n    for key of @modifiers\n      continue if @constructor.C.known_modifications.has key\n      throw new Error \"^moonriver@11^ unknown modifiers key #{rpr key}\"\n    if @modifiers.first is symbol.misfit\n      @modifiers.first = false\n    else\n      ( @modifiers.values ?= {} ).first = @modifiers.first\n      @modifiers.first = true\n    if @modifiers.last is symbol.misfit\n      @modifiers.last = false\n    else\n      ( @modifiers.values ?= {} ).last = @modifiers.last\n      @modifiers.last = true\n    @transform = transform\n    return undefined\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Moonriver\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      constructor:\n        protocol:    null\n      drive_cfg:\n        mode:         'breadth'\n        first_idx:    0\n        last_idx:     -1\n        resume:       false\n\n  #---------------------------------------------------------------------------------------------------------\n  @$: ( modifiers..., transform ) -> new Modified_transform modifiers..., transform\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @types                = types\n    cfg                   = { @constructor.C.defaults.constructor..., cfg..., }\n    @types.validate.mirage_cfg cfg\n    @protocol             = pluck cfg, 'protocol', null\n    @cfg                  = GUY.lft.freeze cfg\n    @data_count           = 0\n    @segments             = []\n    @turns                = 0\n    @inputs               = []\n    @sources              = []\n    @on_first             = []\n    @on_last              = []\n    ### TAINT not a good name for a collection of segments ###\n    @on_once_before_first = []\n    @on_once_after_last   = []\n    @user                 = {} ### user area for sharing state between transforms, etc ###\n    add_length_prop @, 'segments'\n    # @push transform for transform from transforms if transforms?\n    #.......................................................................................................\n    GUY.props.def @, 'sources_are_repeatable',  get: => @sources.every ( x ) -> x.is_repeatable\n    GUY.props.def @, 'can_repeat',              get: => @turns is 0 or @is_repeatable\n    GUY.props.def @, 'first_segment',           get: => @segments[ 0 ]\n    GUY.props.def @, 'last_segment',            get: => @segments[ @segments.length - 1 ]\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( transform ) ->\n    segment = new Segment @, transform, @segments.length, @protocol\n    #.......................................................................................................\n    if segment.modifiers.once_before_first or segment.modifiers.once_after_last\n      if segment.modifiers.once_before_first\n        @push bfirst = ( d, send ) -> send d\n        @on_once_before_first.push segment\n      else\n        @push alast  = ( d, send ) -> send d\n        @on_once_after_last.push segment\n      segment.set_output @last_segment.input\n    #.......................................................................................................\n    else\n      if ( last_segment = @last_segment )?\n        segment.set_input last_segment.output\n        last_segment.output.set_oblivious false\n      else\n        segment.set_input new Duct { on_change: @on_change, }\n      segment.set_output new Duct { on_change: @on_change, is_oblivious: true, }\n      @segments.push segment\n    #.......................................................................................................\n    @sources.push  segment if segment.is_source\n    @on_last.push  segment if segment.modifiers.last\n    @on_first.push segment if segment.modifiers.first\n    return segment\n\n  #---------------------------------------------------------------------------------------------------------\n  on_change: ( delta ) =>\n    @data_count += delta\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield segment for segment in @segments; return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  drive: ( cfg ) ->\n    throw new Error \"^moonriver@12^ pipeline is not repeatable\" unless @sources_are_repeatable\n    @turns++\n    cfg = { @constructor.C.defaults.drive_cfg..., cfg..., }\n    @types.validate.drive_cfg cfg\n    unless cfg.resume\n      for collection in [ @segments, @on_once_before_first, @on_once_after_last, ]\n        for segment in collection\n          segment.set_call_count  0\n          segment.set_is_over     false\n    #.......................................................................................................\n    for segment in @on_once_before_first\n      segment.call symbol.drop\n      R = @_drive cfg\n    #.......................................................................................................\n    R = @_drive cfg\n    #.......................................................................................................\n    for segment in @on_last\n      # continue if segment.is_over ### (???) ###\n      segment.call segment.modifiers.values.last, false ### forward ###\n      R = @_drive cfg\n    #.......................................................................................................\n    for segment in @on_once_after_last\n      segment.call symbol.drop\n      R = @_drive cfg\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _drive: ( cfg ) ->\n    first_idx       = cfg.first_idx\n    last_idx        = cfg.last_idx\n    last_idx        = if last_idx >= 0 then last_idx else @segments.length + last_idx\n    do_exit         = false\n    ### TAINT check for last_idx >= first_idx, last_idx < segments.length and so on ###\n    return null if @segments.length is 0\n    #.......................................................................................................\n    loop\n      for idx in [ first_idx .. last_idx ]\n        segment = @segments[ idx ]\n        return null if segment.has_exited\n        # debug '^443^', ( @toString idx ), segment.modifiers?.once_after_last, segment.modifiers?.once_before_first\n        #...................................................................................................\n        # if ( segment.is_over or not segment.is_listener )\n        if segment.is_over\n          ### If current segment has signalled it's gone out of business for this lap or is not a listener\n          in the first place, route all data on its input queue to its output queue: ###\n          ### TAINT rewrite to single step operation using Array::splice() ###\n          ### TAINT taking non-listeners out of the pipeline would speed this up but also somehwat\n          complicate the construction ###\n          ### TAINT code duplication ###\n          segment._transfer()\n          continue\n        #...................................................................................................\n        if ( segment.modifiers.first ? false ) and ( segment.call_count is 0 )\n          segment.call segment.modifiers.values.first, false ### forward ###\n        #...................................................................................................\n        if segment.is_source\n            ### If current segment is a source, trigger the transform with a discardable `drop` value: ###\n          if segment._has_input_data\n            ### TAINT code duplication ###\n            segment._transfer()\n          segment.call symbol.drop\n        #...................................................................................................\n        else\n          ### Otherwise, call transform with next value from input queue, if any; when in operational mode\n          `breadth`, repeat until input queue is empty: ###\n          while segment.input.length > 0\n            segment.call segment.input.shift()\n            break if cfg.mode is 'depth'\n        #...................................................................................................\n        ### Stop processing if the `exit` signal has been received: ###\n        if segment.exit then do_exit = true; break\n      break if do_exit\n      #.....................................................................................................\n      ### When all sources have called it quits and no more input queues have data, end processing: ###\n      ### TAINT collect stats in above loop ###\n      break if ( @data_count is 0 ) and ( @sources.every ( source ) -> source.is_over )\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  send: ( d ) ->\n    @segments[ 0 ].input.push d unless d is symbol.drop\n    return @_drive @constructor.C.defaults.drive_cfg\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]: -> @toString()\n\n  #---------------------------------------------------------------------------------------------------------\n  toString: ( current_idx ) ->\n    parts       = []\n    joiner      = CND.grey ' ▶︎ '\n    prv_output  = null\n    for segment, idx in @segments\n      parts.push CND.green rpr segment.input unless segment.input is prv_output\n      parts.push \\\n        if idx is current_idx then CND.reverse  CND.gold segment._name_of_transform() \\\n        else                                    CND.gold segment._name_of_transform()\n      parts.push CND.green rpr segment.output\n      prv_output = segment.output\n    return parts.join joiner\n    # return parts.join ' — '\n\n\n\n\n############################################################################################################\nmodule.exports = { Moonriver, Segment, Duct, }\n\n\n"
  ]
}