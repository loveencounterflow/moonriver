{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/NG'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\ntypes                     = null\nUTIL                      = require 'node:util'\n{ hide\n  def }                   = GUY.props\nnameit                    = ( name, f ) -> def f, 'name', { value: name, }\n{ stf_prefix\n  get_types }             = require './types'\nstf                       = ( name ) -> stf_prefix + ( if Array.isArray name then name[ 0 ] else name )\ntransforms                = require './transforms'\nnoop                      = ->\n\n\n#===========================================================================================================\nclass Reporting_collector\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( callback ) ->\n    hide @, 'callback', callback\n    hide @, 'd',        []\n    GUY.props.def @,  'length',   get: -> @d.length\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  push:     ( d ) -> @callback +1; @d.push d\n  unshift:  ( d ) -> @callback +1; @d.unshift d\n  pop:            -> @callback -1; @d.pop()\n  shift:          -> @callback -1; @d.shift()\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> rpr @d\n\n\n\n############################################################################################################\n# SYNC\n#===========================================================================================================\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  @my_type:       'mr_sync_segment_cfg'\n  @fittying_type: 'mr_sync_source_fitting'\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    hide @, 'types',      get_types()\n    @types.create[ @constructor.my_type ] cfg\n    @input            = cfg.input\n    @output           = cfg.output\n    @has_finished     = null\n    @transform_type   = null\n    @_on_before_walk  = noop\n    hide @, 'transform',  @_as_transform cfg.fitting\n    hide @, '_send', send = ( d ) => @output.push d; d ### 'inner' send method ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_transform: ( fitting ) ->\n    debug '^4345^', { fitting, type: ( @types.type_of fitting ), }\n    #.......................................................................................................\n    if @types.isa.function0 fitting\n      @_on_before_walk  = -> @transform = @_get_source_transform fitting()\n      @transform_type   = 'source'\n      R                 = fitting\n    #.......................................................................................................\n    else if ( @types.isa[ @constructor.fittying_type ] fitting )\n      R                 = @_get_source_transform fitting\n      @transform_type   = 'source'\n    #.......................................................................................................\n    else\n      R = fitting\n      switch arity = R.length ? 0\n        when 1 then @transform_type = 'observer'\n        when 2 then @transform_type = 'transducer'\n        else throw new Error \"^mr.e#1^ fittings with arity #{arity} not implemented\"\n    #.......................................................................................................\n    nameit 'ƒ', R if R.name is ''\n    return R\n\n\n  #=========================================================================================================\n  # SOURCE TRANSFORMS\n  #---------------------------------------------------------------------------------------------------------\n  _get_source_transform: ( source ) ->\n    type = @types.type_of source\n    unless ( method = @[stf type] )?\n      throw new Error \"^mr.e#2^ unable to convert a #{type} to a transform\"\n    @has_finished = false\n    R = method.call @, source\n    return nameit type, R if R.name is ''\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'generator']: ( source ) ->\n    @has_finished = false\n    return ( send ) =>\n      return null if @has_finished\n      dsc           = source.next()\n      @has_finished = dsc.done\n      send dsc.value unless @has_finished\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'text']: ( source ) ->\n    letter_re     = /./uy\n    @has_finished = false\n    return nameit '√txt', ( send ) =>\n      return null if @has_finished\n      unless ( match = source.match letter_re )?\n        @has_finished = true\n        return null\n      send match[ 0 ]\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'generatorfunction']: ( source ) -> @_get_source_transform source()\n  [stf'arrayiterator']:     ( source ) -> @[stf'generator'] source\n  [stf'setiterator']:       ( source ) -> @[stf'generator'] source\n  [stf'mapiterator']:       ( source ) -> @[stf'generator'] source\n  [stf'list']:              ( source ) -> nameit '√lst', @[stf'generator'] source.values()\n  [stf'object']:            ( source ) -> nameit '√obj', @[stf'generator'] ( -> yield [ k, v, ] for k, v of source )()\n  [stf'set']:               ( source ) -> nameit '√set', @[stf'generator'] source.values()\n  [stf'map']:               ( source ) -> nameit '√map', @[stf'generator'] source.entries()\n  [stf'function0']:         ( source ) -> source\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  ### 'outer' send method ###\n  send: ( d ) -> @input.push d; d\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    if @transform_type is 'source'\n      @_send @input.shift() while @input.length > 0 ### TAINT could be done with `.splice()` ###\n      return 0 if @transform.has_finished\n      @transform @_send\n      return 1\n    if @input.length > 0\n      d = @input.shift()\n      switch @transform_type\n        when 'observer'\n          @transform  d\n          @_send      d\n        when 'transducer'\n          @transform d, @_send\n        else\n          throw new Error \"^mr.e#3^ internal error: unknown transform type #{rpr @transform_type}\"\n      return 1\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> \"#{rpr @input} ▶ #{@transform.name} ▶ #{rpr @output}\"\n\n\n#===========================================================================================================\nclass Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  @segment_class: Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg                 = { {}..., cfg..., }\n    # cfg                 = types.create.mr_pipeline_cfg cfg\n    @datacount          = 0\n    @input              = @_new_collector()\n    @output             = [] ### pipeline output buffer does not participate in datacount ###\n    @segments           = []\n    @on_before_step     = cfg.on_before_step ? null\n    @on_after_step      = cfg.on_after_step  ? null\n    @on_before_process  = cfg.on_before_process ? null\n    @on_after_process   = cfg.on_after_process  ? null\n    # hide  @, '$',             nameit '$', @_remit.bind @\n    hide  @, 'types',         get_types()\n    def   @, 'sources',       get: -> Object.freeze ( s for s in @segments when s.transform_type is 'source' )\n    def   @, 'has_finished',  get: -> ( @datacount < 1 ) and @sources.every ( s ) -> s.has_finished\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_collector:                   -> new Reporting_collector ( delta ) => @datacount += delta\n\n\n  #=========================================================================================================\n  # BUILDING PIPELINE FROM SEGMENTS\n  #---------------------------------------------------------------------------------------------------------\n  # _remit: ( modifiers, fitting ) ->\n  _remit: ( fitting ) ->\n    if ( count = @segments.length ) is 0\n      input               = @input\n    else\n      prv_segment         = @segments[ count - 1 ]\n      prv_segment.output  = @_new_collector()\n      input               = prv_segment.output\n    try R = new @constructor.segment_class { input, fitting, output: @output, } catch error\n      error.message = error.message + \"\\n\\n^mr.e#4^ unable to convert a #{@types.type_of fitting} into a segment\"\n      throw error\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( P... ) ->\n    R = @_remit P...\n    @segments.push  R\n    # @sources.push   R if R.transform_type is 'source'\n    return R\n\n\n  #=========================================================================================================\n  # SENDING DATA\n  #---------------------------------------------------------------------------------------------------------\n  send: ( d ) -> @input.push d; d\n\n\n  #=========================================================================================================\n  # PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    @on_before_process() if @on_before_process?\n    for segment, segment_idx in @segments\n      @on_before_step segment_idx if @on_before_step?\n      segment.process()\n      @on_after_step segment_idx if @on_after_step?\n    @on_after_process() if @on_after_process?\n    return null\n\n\n  #=========================================================================================================\n  # ITERATING OVER AND RETRIEVING RESULTS\n  #---------------------------------------------------------------------------------------------------------\n  run: -> ( d for d from @walk() )\n  walk: ->\n    segment._on_before_walk() for segment in @segments\n    loop\n      @process()\n      yield d for d in @output\n      @output.length = 0\n      break if @has_finished\n    return null\n\n\n  #=========================================================================================================\n  # CLI REPRESENTATION\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               ->\n    R = []\n    for segment in @segments\n      R.push rpr segment.input\n      R.push '▶'\n      R.push segment.transform.name\n      R.push '▶'\n    R.push rpr @output\n    return R.join ' '\n\n\n############################################################################################################\n# ASYNC\n#===========================================================================================================\nclass Async_segment extends Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  @my_type:       'mr_async_segment_cfg'\n  @fittying_type: 'mr_async_source_fitting'\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    if @transform_type is 'source'\n      @_send @input.shift() while @input.length > 0 ### TAINT could be done with `.splice()` ###\n      return 0 if @transform.has_finished\n      await @transform @_send\n      return 1\n    if @input.length > 0\n      d = @input.shift()\n      d = await d if d instanceof Promise\n      switch @transform_type\n        when 'observer'\n          await @transform  d\n          @_send      d\n        when 'transducer'\n          await @transform d, @_send\n        else\n          throw new Error \"^mr.e#5^ internal error: unknown transform type #{rpr @transform_type}\"\n      return 1\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'asyncgeneratorfunction']: ( source ) -> @[stf'asyncgenerator'] source()\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'asyncgenerator']: ( source ) -> ( send ) =>\n    return null if @has_finished\n    dsc           = await source.next()\n    @has_finished = dsc.done\n    send dsc.value unless @has_finished\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'readstream']: ( source ) ->\n    { Receiver }  = require 'jfee'\n    rcv           = Receiver.from_readstream source, { bare: true, }\n    return nameit '√readstream', @[stf'asyncgenerator'] rcv\n\n\n\n#===========================================================================================================\nclass Async_pipeline extends Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  @segment_class: Async_segment\n\n  #=========================================================================================================\n  # PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    @on_before_process() if @on_before_process?\n    for segment, segment_idx in @segments\n      @on_before_step segment_idx if @on_before_step?\n      await segment.process()\n      @on_after_step segment_idx if @on_after_step?\n    @on_after_process() if @on_after_process?\n    return null\n\n  #=========================================================================================================\n  # CLI REPRESENTATION\n  #---------------------------------------------------------------------------------------------------------\n  run: -> ( d for await d from @walk() )\n  walk: ->\n    loop\n      await @process()\n      yield ( if d instanceof Promise then await d else d ) for d in @output\n      @output.length = 0\n      break if @has_finished\n    return null\n\n\n############################################################################################################\nmodule.exports = {\n  Pipeline\n  Segment\n  Async_pipeline\n  Async_segment\n  Reporting_collector\n  transforms }\n\n"
  ]
}