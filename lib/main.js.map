{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MOONRIVER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nGUY                       = require 'guy'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate }              = types\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Classmethods\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @$once = ( f ) ->\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Moonriver extends @Classmethods\n\n  #---------------------------------------------------------------------------------------------------------\n  @C =\n    symbol =\n      drop:       Symbol.for 'drop' # this value will not go to output\n      exit:       Symbol.for 'exit' # exit pipeline processing\n      # done:       Symbol.for 'done' # done for this iteration\n      over:       Symbol.for 'over' # do not call again in this round\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( raw_pipeline ) ->\n    super()\n    @first_input    = []\n    @last_output    = []\n    @pipeline       = []\n    last_idx        = raw_pipeline.length - 1\n    @inputs         = []\n    @sources        = []\n    @run_count      = 0\n    @is_repeatable  = true\n    for raw_transform, idx in raw_pipeline\n      { is_source\n        transform } = @_get_transform raw_transform\n      do ( transform, idx, is_source ) =>\n        input       = if idx is 0         then @first_input else @pipeline[ idx - 1 ].output\n        output      = if idx is last_idx  then @last_output else []\n        segment     = { transform, input, output, over: false, exit: false, is_source, }\n        send        = ( d ) ->\n          switch d\n            when symbol.drop  then  null\n            when symbol.over  then  @over = true\n            when symbol.exit  then  @exit = true\n            else @output.push d\n          return null\n        send        = send.bind segment\n        send.symbol = symbol\n        send.over   = -> send send.symbol.over\n        send.exit   = -> send send.symbol.exit\n        send.count  = 0\n        GUY.props.hide segment, 'send', send\n        @pipeline.push  segment\n        @sources.push   segment if is_source\n        @inputs.push    input\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_transform: ( raw_transform, is_indirect = false ) ->\n    is_source = false\n    switch type = type_of raw_transform\n      when 'function'\n        switch ( arity = raw_transform.length )\n          when 0\n            throw new Error \"^moonriver@1^ zero-arity transform returned zero-arity function\" if is_indirect\n            return ( d, send ) => send raw_transform()\n          when 2\n            transform = raw_transform\n          else\n            throw new Error \"^moonriver@1^ expected function with arity 2 got one with arity #{arity}\"\n      when 'generatorfunction'\n        is_source       = true\n        transform       = @_source_from_generatorfunction raw_transform\n        unless ( arity = transform.length ) is 2\n          throw new Error \"^moonriver@2^ expected function with arity 2 got one with arity #{arity}\"\n      when 'list'\n        is_source       = true\n        transform       = @_source_from_list raw_transform\n      else\n        if ( type is 'generator' ) or ( isa.function raw_transform[ Symbol.iterator ] )\n          @is_repeatable  = false\n          is_source       = true\n          transform       = @_source_from_generator raw_transform\n          unless ( arity = transform.length ) is 2\n            throw new Error \"^moonriver@3^ expected function with arity 2 got one with arity #{arity}\"\n        else\n          throw new Error \"^moonriver@4^ cannot convert a #{type} to a source\"\n    return { transform, is_source, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_generatorfunction: ( generatorfunction ) ->\n    generator = null\n    return generatorfunction_source = ( d, send ) ->\n      generator ?= generatorfunction()\n      send d\n      { value\n        done  } = generator.next()\n      ### NOTE silently discards value of `return` where present in keeping with JS `for of` loops ###\n      return send value unless done\n      generator = null\n      send.over()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_generator: ( generator ) ->\n    return generator_source = ( d, send ) ->\n      send d\n      { value\n        done  } = generator.next()\n      ### NOTE silently discards value of `return` where present in keeping with JS `for of` loops ###\n      return send value unless done\n      send.over()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _source_from_list: ( list ) ->\n    last_idx  = list.length - 1\n    idx       = -1\n    return list_source = ( d, send ) ->\n      send d\n      idx++\n      if idx > last_idx\n        idx = -1\n        return send.over()\n      send list[ idx ]\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  can_repeat: -> @run_count is 0 or @repeatable\n\n  #---------------------------------------------------------------------------------------------------------\n  _on_drive_start: ->\n    return false unless @can_repeat()\n    @run_count++\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  drive: ( cfg ) ->\n    ### TAINT validate `cfg` ###\n    throw new Error \"^moonriver@5^ pipeline is not repeatable\" unless @_on_drive_start()\n    defaults      = { mode: 'depth', }\n    { mode      } = { defaults..., cfg..., }\n    segment.over  = false for segment in @pipeline\n    loop\n      for segment, idx in @pipeline\n        if segment.over\n          segment.output.push segment.input.shift() while segment.input.length > 0\n          continue\n        if segment.is_source and segment.input.length is 0\n          segment.transform symbol.drop, segment.send\n        else\n          while segment.input.length > 0\n            segment.transform segment.input.shift(), segment.send\n            break if mode is 'depth'\n        @last_output.length = 0\n        throw symbol.exit if segment.exit\n      ### TAINT collect stats in above loop ###\n      if @sources.every ( source ) -> source.over\n        unless @inputs.some ( input ) -> input.length > 0\n          break\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _show_pipeline: ->\n    urge @inputs[ 0 ]\n    for segment in @pipeline\n      urge segment.transform.name ? '?', segment.output\n    return null\n\n\n\n\n"
  ]
}