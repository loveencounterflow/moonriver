{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/MAIN'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nUTIL                      = require 'node:util'\n{ hide\n  def }                   = GUY.props\nnameit                    = ( name, f ) -> def f, 'name', { value: name, }\n{ misfit\n  stf_prefix\n  get_sync_types\n  get_async_types }       = require './types'\nstf                       = ( name ) -> stf_prefix + ( if Array.isArray name then name[ 0 ] else name )\ntransforms                = require './transforms'\nnoop                      = ->\n\n\n#===========================================================================================================\nclass Reporting_collector\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( callback ) ->\n    hide @, 'callback', callback\n    hide @, 'd',        []\n    GUY.props.def @,  'length',   get: -> @d.length\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  push:     ( d ) -> @callback +1; @d.push d\n  unshift:  ( d ) -> @callback +1; @d.unshift d\n  pop:            -> @callback -1; @d.pop()\n  shift:          -> @callback -1; @d.shift()\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> rpr @d\n\n\n\n############################################################################################################\n# SYNC\n#===========================================================================================================\nclass Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:                     get_sync_types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    clasz             = @constructor\n    hide @, 'types', clasz.type_getter()\n    @types.create.segment_cfg cfg\n    @input            = cfg.input\n    @output           = cfg.output\n    @has_finished     = null\n    @transform_type   = null\n    @_on_before_walk  = noop\n    @first            = cfg.modifiers.first\n    @last             = cfg.modifiers.last\n    hide @, 'transform',  @_as_transform cfg.fitting\n    hide @, '_send', send = ( d ) => @output.push d; d ### 'inner' send method ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_transform: ( fitting ) ->\n    sigil = null\n    #.......................................................................................................\n    switch fitting_type = @types.type_of fitting\n      #.....................................................................................................\n      when 'producer_fitting'\n        @_on_before_walk  = ->\n          source      = fitting()\n          @transform  = @_get_source_transform ( @types.type_of source ), source\n          return null\n        @transform_type   = 'source'\n        R                 = fitting\n        sigil             = '?sr '\n      #.....................................................................................................\n      when 'observer_fitting'\n        R               = fitting\n        @transform_type = 'observer'\n        sigil           = '?o'\n      #.....................................................................................................\n      when 'transducer_fitting'\n        R               = fitting\n        @transform_type = 'transducer'\n        sigil           = '?t'\n      #.....................................................................................................\n      else # 'source_fitting'\n        R                 = @_get_source_transform fitting_type, fitting\n        @transform_type   = 'source'\n        sigil             = '?sn '\n    #.......................................................................................................\n    name  = if R.name is '' then 'ƒ' else R.name\n    name  = sigil + name\n    nameit name, R\n    return R\n\n\n  #=========================================================================================================\n  # SOURCE TRANSFORMS\n  #---------------------------------------------------------------------------------------------------------\n  _get_source_transform: ( type, source ) ->\n    unless ( method = @[stf type] )?\n      throw new Error \"^mr.e#2^ unable to convert a #{type} to a transform\"\n    @has_finished = false\n    R = method.call @, source\n    return nameit type, R if R.name is ''\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'generator']: ( source ) ->\n    @has_finished = false\n    return ( send ) =>\n      return null if @has_finished\n      dsc           = source.next()\n      @has_finished = dsc.done\n      send dsc.value unless @has_finished\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'text']: ( source ) ->\n    letter_re     = /./uy\n    @has_finished = false\n    return nameit '√txt', ( send ) =>\n      return null if @has_finished\n      unless ( match = source.match letter_re )?\n        @has_finished = true\n        return null\n      send match[ 0 ]\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'generatorfunction']: ( source ) -> @_get_source_transform 'generator', source()\n  [stf'arrayiterator']:     ( source ) -> @[stf'generator'] source\n  [stf'setiterator']:       ( source ) -> @[stf'generator'] source\n  [stf'mapiterator']:       ( source ) -> @[stf'generator'] source\n  [stf'list']:              ( source ) -> nameit '√lst', @[stf'generator'] source.values()\n  [stf'object']:            ( source ) -> nameit '√obj', @[stf'generator'] ( -> yield [ k, v, ] for k, v of source )()\n  [stf'set']:               ( source ) -> nameit '√set', @[stf'generator'] source.values()\n  [stf'map']:               ( source ) -> nameit '√map', @[stf'generator'] source.entries()\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  ### 'outer' send method ###\n  send: ( d ) -> @input.push d; d\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    if @transform_type is 'source'\n      @_send @input.shift() while @input.length > 0 ### TAINT could be done with `.splice()` ###\n      return 0 if @transform.has_finished\n      @transform @_send\n      return 1\n    if @input.length > 0\n      d = @input.shift()\n      switch @transform_type\n        when 'observer'\n          @transform  d\n          @_send      d\n        when 'transducer'\n          @transform d, @_send\n        else\n          throw new Error \"^mr.e#3^ internal error: unknown transform type #{rpr @transform_type}\"\n      return 1\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               -> \"#{rpr @input} ▶ #{@transform.name} ▶ #{rpr @output}\"\n\n\n#===========================================================================================================\nclass Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:   get_sync_types\n  @segment_class: Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    clasz               = @constructor\n    cfg                 = { {}..., cfg..., }\n    # cfg                 = types.create.pipeline_cfg cfg\n    @datacount          = 0\n    @input              = @_new_collector()\n    @output             = [] ### pipeline output buffer does not participate in datacount ###\n    @segments           = []\n    hide  @, '$',             nameit '$', @_segment_from_fitting.bind @\n    hide  @, 'types',         clasz.type_getter()\n    def   @, 'sources',       get: -> Object.freeze ( s for s in @segments when s.transform_type is 'source' )\n    def   @, 'has_finished',  get: -> ( @datacount < 1 ) and @sources.every ( s ) -> s.has_finished\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_collector:                   -> new Reporting_collector ( delta ) => @datacount += delta\n\n\n  #=========================================================================================================\n  # BUILDING PIPELINE FROM SEGMENTS\n  #---------------------------------------------------------------------------------------------------------\n  _get_modifiers_and_fitting: ( modifiers, fitting ) ->\n    switch arity = arguments.length\n      when 1 then [ modifiers, fitting, ] = [ null, modifiers, ]\n      when 2 then null\n      else throw new Error \"^mr.e#5^ expected 1 or 2 arguments, got #{arity}\"\n    modifiers = @types.create.modifiers modifiers\n    return [ modifiers, fitting, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _segment_from_fitting: ( P... ) ->\n    [ modifiers\n      fitting   ] = @_get_modifiers_and_fitting P...\n    return @_segment_from_fitting fitting.values... if @types.isa.proto_segment fitting\n    ### TAINT consider to move this code to `Segment` class ###\n    if ( count = @segments.length ) is 0\n      input               = @input\n    else\n      prv_segment         = @segments[ count - 1 ]\n      prv_segment.output  = @_new_collector()\n      input               = prv_segment.output\n    if @types.isa.segment fitting\n      R         = fitting\n      R.input   = input\n      R.output  = @output\n    else\n      try R = new @constructor.segment_class { modifiers, input, fitting, output: @output, } catch error\n        error.message = error.message + \"\\n\\n^mr.e#4^ unable to convert a #{@types.type_of fitting} into a segment\"\n        throw error\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( P... ) ->\n    @segments.push R = @_segment_from_fitting P...\n    return R\n\n\n  #=========================================================================================================\n  # SENDING DATA\n  #---------------------------------------------------------------------------------------------------------\n  send: ( d ) -> @input.push d; d\n\n\n  #=========================================================================================================\n  # PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    for segment, segment_idx in @segments\n      segment.process()\n    return null\n\n\n  #=========================================================================================================\n  # ITERATING OVER AND RETRIEVING RESULTS\n  #---------------------------------------------------------------------------------------------------------\n  run: -> ( d for d from @walk() )\n  walk: ->\n    segment._on_before_walk()   for segment in @segments\n    segment.send segment.first  for segment in @segments when segment.first isnt misfit\n    yield from @_walk()\n    segment.send segment.last   for segment in @segments when segment.last isnt misfit\n    yield from @_walk() unless @has_finished\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk: ->\n    loop\n      @process()\n      yield d for d in @output\n      @output.length = 0\n      break if @has_finished\n    return null\n\n\n  #=========================================================================================================\n  # CLI REPRESENTATION\n  #---------------------------------------------------------------------------------------------------------\n  [UTIL.inspect.custom]:  -> @toString()\n  toString:               ->\n    R = []\n    for segment in @segments\n      R.push rpr segment.input\n      R.push '▶'\n      R.push segment.transform.name\n      R.push '▶'\n    R.push rpr @output\n    return R.join ' '\n\n\n############################################################################################################\n# ASYNC\n#===========================================================================================================\nclass Async_segment extends Segment\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:                     get_async_types\n\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    if @transform_type is 'source'\n      @_send @input.shift() while @input.length > 0 ### TAINT could be done with `.splice()` ###\n      return 0 if @transform.has_finished\n      await @transform @_send\n      return 1\n    if @input.length > 0\n      d = @input.shift()\n      d = await d if d instanceof Promise\n      switch @transform_type\n        when 'observer'\n          await @transform  d\n          @_send      d\n        when 'transducer'\n          await @transform d, @_send\n        else\n          throw new Error \"^mr.e#5^ internal error: unknown transform type #{rpr @transform_type}\"\n      return 1\n    return 0\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'asyncgeneratorfunction']: ( source ) -> @[stf'asyncgenerator'] source()\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'asyncgenerator']: ( source ) -> ( send ) =>\n    return null if @has_finished\n    dsc           = await source.next()\n    @has_finished = dsc.done\n    send dsc.value unless @has_finished\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  [stf'readstream']: ( source ) ->\n    { Receiver }  = require 'jfee'\n    rcv           = Receiver.from_readstream source, { bare: true, }\n    return nameit '√readstream', @[stf'asyncgenerator'] rcv\n\n\n#===========================================================================================================\nclass Async_pipeline extends Pipeline\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_getter:                     get_async_types\n  @segment_class:                   Async_segment\n\n  #=========================================================================================================\n  # PROCESSING\n  #---------------------------------------------------------------------------------------------------------\n  process: ->\n    for segment, segment_idx in @segments\n      await segment.process()\n    return null\n\n  #=========================================================================================================\n  # CLI REPRESENTATION\n  #---------------------------------------------------------------------------------------------------------\n  run: -> ( d for await d from @walk() )\n  walk: ->\n    await segment._on_before_walk() for segment in @segments\n    loop\n      await @process()\n      yield ( if d instanceof Promise then await d else d ) for d in @output\n      @output.length = 0\n      break if @has_finished\n    return null\n\n\n############################################################################################################\n# HELPERS\n#===========================================================================================================\nclass Proto_segment\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    @values = P\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\n$ = ( modifiers, fitting ) ->\n  new Proto_segment modifiers, fitting\n\n\n############################################################################################################\nmodule.exports = {\n  Pipeline\n  Segment\n  Async_pipeline\n  Async_segment\n  Reporting_collector\n  transforms\n  Proto_segment\n  $ }\n\n"
  ]
}