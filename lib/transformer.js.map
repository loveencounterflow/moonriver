{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/transformer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TRANSFORMER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ get_base_types }        = require './types'\n\n\n\n#===========================================================================================================\nclass Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  @as_pipeline: ( cfg ) ->\n    R = new ( require './main' ).Pipeline cfg; R.push new @(); return R\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    GUY.props.hide @, '_types', get_base_types()\n    GUY.props.hide @, '_transforms', []\n    GUY.props.def @, 'length',\n      get:        -> @_transforms.length\n      set: ( n )  -> @_transforms.length = n\n    @_build()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield from @_transforms\n\n  #---------------------------------------------------------------------------------------------------------\n  _build: ->\n    chain = ( GUY.props.get_prototype_chain @ ).reverse()\n    for object in chain\n      for key from GUY.props.walk_keys object, { hidden: true, builtins: false, depth: 0, }\n        continue if key is 'constructor'\n        continue if key is 'length'\n        continue if key.startsWith '_'\n        @_transforms.push d for d from @_walk_values object[ key ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_values: ( value ) ->\n    return yield new value() if @_types.isa.class value\n    #.......................................................................................................\n    if @_types.isa.function value\n      return yield value unless ( value.name.startsWith '$' ) or ( value.name.startsWith 'bound $' )\n      return yield value.call @\n    #.......................................................................................................\n    if @_types.isa.list value\n      for e in value\n        yield d for d from @_walk_values e\n      return null\n    #.......................................................................................................\n    return yield value\n\n\n#===========================================================================================================\nmodule.exports = { Transformer, }\n\n"
  ]
}