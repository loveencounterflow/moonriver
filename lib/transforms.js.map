{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/transforms.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'MOONRIVER/TRANSFORMS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ get_transform_types\n  misfit                } = require './types'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$window = ( cfg ) ->\n  cfg           = get_transform_types().create.transform_window_cfg cfg\n  { min\n    max\n    empty }     = cfg\n  { $ }         = require './main'\n  last          = Symbol 'last'\n  buffer        = {}\n  buffer[ nr ]  = empty for nr in [ min .. max ]\n  advance       = -> buffer[ nr - 1 ]  = buffer[ nr ] for nr in [ min + 1 .. max ]\n  #.........................................................................................................\n  return $ { last, }, ( d, send ) ->\n    if d is last\n      loop\n        advance()\n        buffer[ max ] = empty\n        ### TAINT incorrect condition ###\n        break if buffer[ 0 ] is empty\n        send { buffer..., }\n      return null\n    advance()\n    buffer[ max ] = d\n    send { buffer..., } unless buffer[ 0 ] is empty\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$window_list = ( min, max, empty = misfit ) ->\n#   { $ }         = require './main'\n#   last          = Symbol 'last'\n#   buffer        = ( empty for nr in [ min .. max ] )\n#   #.........................................................................................................\n#   return $ { last, }, ( d, send ) ->\n#     if d is last\n#       loop\n#         buffer.shift()\n#         buffer.push empty\n#         break if buffer[ 0 ] is empty\n#         send [ buffer..., ]\n#       return null\n#     buffer.shift()\n#     buffer.push d\n#     send [ buffer..., ] unless buffer[ 0 ] is empty\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_lines = ->\n  SL  = require 'intertext-splitlines'\n  ctx = SL.new_context()\n  return split_lines = ( d, send ) ->\n    for line from SL.walk_lines ctx, d\n      send line\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$limit = ( n ) ->\n  count = 0\n  return limit = ( d, send ) ->\n    return null if count >= n\n    count++\n    send d\n    return null\n\n\n\n"
  ]
}