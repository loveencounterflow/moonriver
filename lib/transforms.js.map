{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/transforms.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA,aAAA;;EAGA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,GAAF,EAAO,GAAP,EAAY,QAAQ,MAApB,CAAA;AACX,QAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA;IAAE,CAAA,CAAE,CAAF,CAAA,GAAgB,OAAA,CAAQ,QAAR,CAAhB;IACA,IAAA,GAAgB,MAAA,CAAO,MAAP;IAChB,MAAA,GAAgB,CAAA;IAChB,KAAgC,mGAAhC;MAAA,MAAM,CAAE,EAAF,CAAN,GAAgB;IAAhB;IACA,OAAA,GAAgB,QAAA,CAAA,CAAA;AAAE,UAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA;AAAC;MAAA,KAA2C,0GAA3C;qBAAA,MAAM,CAAE,EAAA,GAAK,CAAP,CAAN,GAAoB,MAAM,CAAE,EAAF;MAA1B,CAAA;;IAAH,EAJlB;;AAME,WAAO,CAAA,CAAE,CAAE,IAAF,CAAF,EAAa,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;MAClB,IAAG,CAAA,KAAK,IAAR;AACE,eAAA,IAAA;UACE,OAAA,CAAA;UACA,MAAM,CAAE,GAAF,CAAN,GAAgB;UAChB,IAAS,MAAM,CAAE,CAAF,CAAN,KAAe,KAAxB;AAAA,kBAAA;;UACA,IAAA,CAAK,CAAE,GAAA,MAAF,CAAL;QAJF;AAKA,eAAO,KANT;;MAOA,OAAA,CAAA;MACA,MAAM,CAAE,GAAF,CAAN,GAAgB;MAChB,IAA2B,MAAM,CAAE,CAAF,CAAN,KAAe,KAA1C;eAAA,IAAA,CAAK,CAAE,GAAA,MAAF,CAAL,EAAA;;IAVkB,CAAb;EAPE,EAHX;;;EAuBA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAA,CAAA;AAChB,QAAA,EAAA,EAAA,GAAA,EAAA;IAAE,EAAA,GAAM,OAAA,CAAQ,sBAAR;IACN,GAAA,GAAM,EAAE,CAAC,WAAH,CAAA;AACN,WAAO,WAAA,GAAc,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACvB,UAAA,IAAA,EAAA;AAAI;MAAA,KAAA,WAAA;QACE,IAAA,CAAK,IAAL;MADF;AAEA,aAAO;IAHY;EAHP,EAvBhB;;;EAgCA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAE,CAAF,CAAA;AACV,QAAA,KAAA,EAAA;IAAE,KAAA,GAAQ;AACR,WAAO,KAAA,GAAQ,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;MACb,IAAe,KAAA,IAAS,CAAxB;AAAA,eAAO,KAAP;;MACA,KAAA;MACA,IAAA,CAAK,CAAL;AACA,aAAO;IAJM;EAFP;AAhCV",
  "sourcesContent": [
    "\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\n@$window = ( min, max, empty = misfit ) ->\n  { $ }         = require './main'\n  last          = Symbol 'last'\n  buffer        = {}\n  buffer[ nr ]  = empty for nr in [ min .. max ]\n  advance       = -> buffer[ nr - 1 ]  = buffer[ nr ] for nr in [ min + 1 .. max ]\n  #.........................................................................................................\n  return $ { last, }, ( d, send ) ->\n    if d is last\n      loop\n        advance()\n        buffer[ max ] = empty\n        break if buffer[ 0 ] is empty\n        send { buffer..., }\n      return null\n    advance()\n    buffer[ max ] = d\n    send { buffer..., } unless buffer[ 0 ] is empty\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_lines = ->\n  SL  = require 'intertext-splitlines'\n  ctx = SL.new_context()\n  return split_lines = ( d, send ) ->\n    for line from SL.walk_lines ctx, d\n      send line\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$limit = ( n ) ->\n  count = 0\n  return limit = ( d, send ) ->\n    return null if count >= n\n    count++\n    send d\n    return null\n\n\n\n"
  ]
}